# Class name: Pipe
#
# Description:
#    This class is pipe drivered class.
#
#    Impliment methods are:
#      Pipe::init
#      

class Pipe;

Pipe method init (in out body) {
    sets in $in;
    sets out $out;
    sets body $body;
    sets stat INIT;
    sets infile "";
    sets outfile "";
    sets error "";
    sets result nil;
    sets PipeObject [self];
    sets @term-hook nil;
};

Pipe method stat? () {
    return $stat;
};

Pipe method run () {
    if {sets? coro} else: {
	sets coro [coro $body];
	$coro eval {
	    setvar stdin $in;
	    setvar stdout $out;
	    setvar INFILE $infile;
	    setvar OUTFILE $outfile;
	    if {defvar? CO-MODE} else: {defvar CO-MODE t};
	};
    };

    sets stat RUN;
    try {
	sets stat [$coro next];
	if {eq? [$coro stat] DONE} then: {
	    sets stat DONE;
	};
    }
    catch: {| e |
	sets stat ERROR;
	sets error ["<" . [$e car] "># " [$e cdr]];
    };
    
    if {or [eq? $stat DONE] [eq? $stat ERROR]} then: {
	$out flush;
	if {eq? $out,@name Stream} then: {$out close;};
	if {eq? $in,@name  Stream} then: {$in  close;};
    };
};

Pipe method debug_out () {
    println $in;
    println $body;
    println $out;
};

Pipe method string () {
    "Pipe::" . $body " | " $in " | " $out;
};

Pipe method release () {
    if {sets? coro} then: {
	$coro release;
    };
    if [true? @term-hook] then: {$@term-hook};
};

Pipe method set-infile (f) {
    sets infile $f;
};

Pipe method set-outfile (f) {
    sets outfile $f;
};

Pipe method get-body () {
    return $body;
};

Pipe method get-error () {
    return $error;
};

Pipe method get-result () {
    return $result;
};

Pipe method set-result (r) {
    sets result $r;
};

Pipe method out-setup () {
    o ::= make-proxy $out;
    f ::= $o method? puts;
    s ::= self;
    
    $o method puts (*) {
	r ::= call $f $*;

	if {[$* len] = 1} then: {
	    $s set-result [$* item];
	} else: {
	    $s set-result $*;
        };

	return $r;
    };

    sets out $o;
};

Pipe method set-term-hook (h) {
    sets @term-hook $h;
};
