# exec external process

defun exec (args: args) {
    args ::= $args map {| i | "" . $i};
    command ::= $args >>;

    d ::= dict [fork-exec $command $args];

    pid := $d,pid;

    out := $d,left;
    OUT ::= new File;
    $OUT set! $out mode: o;
    $OUT set-newline t;
    $OUT set-nobuffer;

    in := $d,right;
    IN ::= new File;
    $IN set! $in mode: i;
    $IN set-newline nil;
    $IN set-nobuffer;
    if {sets? CO-MODE} then: {$IN set-noblock t};

    if {true? PipeObject} then: {
	$PipeObject set-term-hook [fun () {$IN close; $OUT close}];
    };

    try {
	loop {
	    loop {
		if {$stdin ready? timeout: 50} then: {
		    r ::= $stdin gets;
		    if [nil? $r] else: {
			if {$OUT ready? timeout: 50} then: {
			    println file: $OUT $r;
			    $OUT flush;
			} else: {
			    break;
			};
		    };
		} else: {
		    break;
		};
		if {$stdin eof?} then: {$OUT close; break};
	    };
	    if {$stdin eof?} then: {$OUT close};
	    
	    loop {
		if {$IN ready? timeout: 50} then: {
		    try {
			r ::= $IN gets;
		    } catch: {| e |
			if {eq? [$e car] ErrIOAgain}
		        then: {
			    pause @WRITE; 
			    continue;
			}
			else: {throw $e};
		    };
		    if [nil? $r] else: {
			println $r;
			$stdout flush;
		    };
		} else: {
		    break;
		};
		if {$IN eof?} then: {break};
	    };

	    if {$IN eof?} then: {break};
	    if {sets? CO-MODE} then: {pause @WRITE};
	};
	
        $OUT close;
    }
    
    fin: {
	$OUT close;
	$IN close;
	if {[wait $pid] = 255} then: {throw ErrExecProgram "can\'t execute program."};
    }
    ;
};
